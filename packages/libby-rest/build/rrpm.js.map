{"version":3,"file":"rrpm.js","sources":["../src/RESTSessionStrategy.js","../src/RESTConnection.js","../src/RESTDAO.js","../src/RESTURL.js","../src/RESTStoreStrategy.js"],"sourcesContent":["import _ from 'lodash';\nimport { SessionStrategy, Libby } from '@phinxlab/libby-core-public';\nimport { RESTConnection, RESTMethod } from './RESTConnection';\n\n\n// FIXME THIS SHOULD BE CHANGED AS A RESTCHINOSTRATEGY.\nexport class RESTSessionStrategyRAW extends SessionStrategy {\n  // FIXME THIS IS WRONG, WE CAN HAVE MULTPLIE STRATEGIES\n  static name() {\n    return 'rest';\n  }\n\n  /**\n   *\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n     *\n     */\n  async recoverSession() {\n    super.recoverSession();\n    const token = await this.getTokenManager().retrieve();\n    if (!token) this.notify(SessionStrategy.NO_SESSION);\n    this.status(token);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  get name() {\n    return 'rest';\n  }\n\n  /**\n   *\n   * @param url\n   * @param loginPath\n   * @param logoutPath\n   * @param statusPath\n   * @returns {RESTSessionStrategyRAW}\n   */\n  init(url, loginPath = '/platform/login', logoutPath = '/platform/logout', statusPath = '/platform/status') {\n    super.init();\n    RESTConnection.defineHeader('x-libby-app', Libby.App);\n    this.config = {\n      url, loginPath, logoutPath, statusPath,\n    };\n    this.notify(SessionStrategy.NO_SESSION);\n    return this;\n  }\n\n  /**\n     *\n     */\n  async status(token) {\n    super.status(token);\n    RESTConnection.defineHeader('x-chino-token', token);\n    return RESTConnection.execute(`${this.config.statusPath}`, {}, RESTMethod.POST).then((http) => {\n      const session = http.data;\n      const { user } = session;\n      user.isGuest = session.isGuest;\n      this.notify(SessionStrategy.NEW_SESSION, user, http.headers['x-chino-token']);\n      return http.data;\n    }).catch((err) => {\n      // eslint-disable-next-line\n      console.log(err.message);\n      RESTConnection.removeHeader('x-chino-token');\n      this.notify(SessionStrategy.FAILED_TO_LOGIN, undefined, undefined, _.get(err, 'rest.data', 'Unable to connect to server'));\n    });\n  }\n\n  /**\n   *\n   */\n  async login(nick, password, customParams = {}) {\n    super.login(nick, password);\n    const dto = { nick, password, ...customParams };\n    RESTConnection.removeHeader('x-chino-token');\n    return RESTConnection.execute(`${this.config.loginPath}`, dto, RESTMethod.POST, true).then((http) => {\n      const token = http.headers['x-chino-token'];\n      RESTConnection.defineHeader('x-chino-token', token);\n      const session = http.data;\n      const { user } = session;\n      user.isGuest = session.isGuest;\n      this.notify(SessionStrategy.NEW_SESSION, user, token);\n      return http.data;\n    }).catch((err) => {\n      this.notify(SessionStrategy.FAILED_TO_LOGIN, undefined, undefined, _.get(err, 'rest.data', 'Unable to connect to server'));\n    });\n  }\n\n  /**\n   *\n   * @param url\n   * @returns {string}\n   */\n  getURL(url) {\n    return this.config.url + url;\n  }\n\n  /**\n   *\n   */\n  async logout() {\n    super.logout();\n    return RESTConnection.execute(`${this.config.logoutPath}`, {}, RESTMethod.POST).then((http) => {\n      RESTConnection.removeHeader('x-chino-token');\n      this.getTokenManager().clean();\n      this.notify(SessionStrategy.NO_SESSION);\n    }).catch((err) => {\n      RESTConnection.removeHeader('x-chino-token');\n      this.notify(SessionStrategy.FAILED_TO_LOGIN, undefined, undefined, _.get(err, 'rest.data', 'Unable to connect to server'));\n    });\n  }\n}\n\nexport const RESTSessionStrategy = new RESTSessionStrategyRAW();\n","import get from \"lodash/get\";\nimport { RESTSessionStrategy } from \"./RESTSessionStrategy\";\nimport { Database } from '@phinxlab/libby-core-public';\n\nexport const RESTMethod = {};\nRESTMethod.PUT = Symbol('put');\nRESTMethod.POST = Symbol('post');\nRESTMethod.DELETE = Symbol('delete');\nRESTMethod.GET = Symbol('get');\n\nclass RESTConnectionRAW {\n    header = {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n    }\n\n    createConfig(method, url, data) {\n        if (method === 'get') {\n            return { url, method, headers: this.header }\n        }\n        return { url, method, body: JSON.stringify(data), headers: this.header }\n    };\n\n    removeHeader(header) {\n        delete this.header[header];\n    }\n\n    defineHeader(header, value) {\n        this.header[header] = value;\n\n    }\n    /**\n     *\n     * @param url\n     * @param dto\n     * @param method\n     * @returns {Promise<*>}\n     */\n    async execute(url, dto, method, isolate = false) {\n        return this[method](RESTSessionStrategy.getURL(url), dto, isolate);\n    }\n    /**\n     *\n     * @param url\n     * @param dto\n     * @returns {Promise<void>}\n     */\n    [RESTMethod.PUT] = async (url, dto, isolate) => {\n        return this.executeHTTP('put', url, dto, isolate);\n    };\n    /**\n     *\n     * @param url\n     * @param dto\n     * @returns {Promise<void>}\n     */\n    [RESTMethod.POST] = async (url, dto, isolate) => {\n        return this.executeHTTP('post', url, dto, isolate);\n    };\n    /**\n     *\n     * @param url\n     * @param dto\n     * @returns {Promise<void>}\n     */\n    [RESTMethod.DELETE] = async (url, dto, isolate) => {\n        return this.executeHTTP('delete', url, dto, isolate);\n    };\n\n    async executeHTTP(method, url, dto, isolate) {\n        try {\n            const response = await fetch(url, this.createConfig(method, url, dto));\n            const token = response.headers.get('x-chino-token');\n            const headersRaw = get(response, 'headers.map', 'headers');\n            const headers = { ...headersRaw, 'x-chino-token': token };\n            const status = response.status;\n            this.validateResponse(headers, status);\n            try {\n                const data = await response.json();\n                return { data, headers, status };\n            } catch(e) {\n                return { headers, status };\n            }\n        } catch (e) {\n            console.log(e)\n            if (get(e, 'rest')) throw e;\n            else throw new Error(e.toString(), evaluateError(e));\n        }\n    }\n\n    /**\n     *\n     * @param url\n     * @param dto\n     * @returns {Promise<void>}\n     */\n    [RESTMethod.GET] = async (url, dto, isolate) => {\n        return this.executeHTTP('get', url, dto, isolate);\n    };\n\n    /**\n     * Validate if the backend response has errors.\n     *\n     * @param {Array} headers headers of the response.\n     * @param {number} status status of the response.\n     */\n    validateResponse = (headers, status) => {\n        const errorHeader = 'x-chino-error';\n        if (Object.keys(headers).includes(errorHeader)) {\n            const error = evaluateError(headers[errorHeader]);\n            throw this.createHTTPError(status, error, error);\n        }\n    }\n\n    createHTTPError(code, text, data) {\n        //FIXME IF THE STRATEGY IS DIFFERENT FROM THE REST MIGHT GENERATE CONFLICTS\n        const session = Database.getSessionStrategy(RESTSessionStrategy.name);\n        let error = new Error(`REST ERROR -> ${code} with ${text} at data ${data}`, text);\n        switch (code) {\n            case 412:\n                session.sessionHasExpired();\n        }\n        error.rest = { code, text, data };\n        return error;\n    }\n}\n\n//FIXME WE SHOULD EVALUATE THE ERRORS IN A BETTER WAY\nfunction evaluateError(e) {\n    const text = e.toString();\n    if (text.indexOf('Network Error') > 0) {\n        return 'Network connection to server has failed';\n    }\n    return e.toString().replace('Error:', '');\n}\n\nexport const RESTConnection = new RESTConnectionRAW();\n","import { DAO, Database } from '@phinxlab/libby-core-public';\n\nexport class RESTDAO extends DAO {\n\n    constructor(name,pk) {\n        super(name,pk);\n        this.strategy = Database.get(name).strategy;\n    }\n    /**\n     * Processes the resultsets commands\n     * @param command\n     * @returns {Promise<void>}\n     */\n    async processResultset(command) {\n        return this.strategy.find(command.parameter);\n    }\n    /**\n     * Processes the insert/update commands\n     * @param command\n     * @returns {Promise<*|Promise<*>|void>}\n     */\n    async processChange(command) {\n        return this.strategy.save(command.parameter)\n            .then((saved)=>{\n                return saved;\n            })\n    }\n    /**\n     * Processes the insert/update commands\n     * @param command\n     * @returns {Promise<*|Promise<*>|void>}\n     */\n    async processRemove(command) {\n        return this.strategy.remove(command.parameter)\n            .then((removed)=>{\n                return removed;\n            })\n    }\n    /**\n     * Executes the received commands\n     * @param command\n     * @returns {Promise<void>}\n     */\n    async execute(command) {\n        //Always exeute the parent in order to kept the platforma healtrh\n        super.execute(command);\n        if (!command.isSave()) {\n            if (command.isRemove()) {\n                return this.processRemove(command);\n            }\n            return this.processResultset(command);\n        } else {\n            return this.processChange(command);\n        }\n\n    }\n}\n","import { DAOQueryBuilder } from \"@phinxlab/libby-core-public\";\n\nconst JSConditions = {};\nJSConditions[DAOQueryBuilder.LOWEROREQUALS]='lowerorequals';\nJSConditions[DAOQueryBuilder.LOWER]='lower';\nJSConditions[DAOQueryBuilder.EQUALS]='equals';\nJSConditions[DAOQueryBuilder.NOT_EQUALS]='not_equals';\nJSConditions[DAOQueryBuilder.HIGHEROREQUALS]='higherorequals';\nJSConditions[DAOQueryBuilder.HIGHER]='higher';\nJSConditions[DAOQueryBuilder.INCLUDES]='includes';\nJSConditions[DAOQueryBuilder.STARTS]='starts';\nJSConditions[DAOQueryBuilder.ENDS]='ends';\n\nexport class RESTURL {\n\n     constructor(path,pk) {\n         this.path = path;\n         this.pk = pk;\n     }\n\n    createInsert(dto) {\n        return `${this.path}/`;\n    }\n\n    createUpdate(dto) {\n        return `${this.path}/${dto[this.pk]}`;\n    }\n\n    createDelete(dto) {\n        return `${this.path}/${dto[this.pk]}`;\n    }\n\n    createFind(command) {\n        const {filter,order,limit,aggregate} = command;\n        const keys = Object.getOwnPropertySymbols(filter);\n        const url = [];\n        //If it is a query we create a query\n        if (keys.length>0) {\n            let query = this.reference;\n            //We evaluate filters\n            for (let i=0;i<keys.length;i++) {\n                const where = filter[keys[i]];\n                if (where.type === DAOQueryBuilder.RANGE ) {\n                    url.push(`${where.field}[${JSConditions[DAOQueryBuilder.HIGHEROREQUALS]}]=${where.value}`);\n                    url.push(`${where.field}[${JSConditions[DAOQueryBuilder.LOWEROREQUALS]}]=${where.to}`);\n                }\n                if (where.type===DAOQueryBuilder.GROUP_START || where.type===DAOQueryBuilder.GROUP_END || where.type===DAOQueryBuilder.AND || where.type===DAOQueryBuilder.OR ) {\n                    url.push(`${where.field}[${where.value}]`);\n                } else {\n                    url.push(`${where.field}[${JSConditions[where.type]}]=${where.value}`);\n                }\n            }\n        }\n        //We evaluate orders\n        const sort=[];\n        for (let i=0;i<order.length;i++) {\n            const o = order[i];\n            sort.push((o.direction === 'desc'?'^':'')+o.field);\n        }\n        if (aggregate) {\n            url.push(aggregate.toURL().join('&'));\n        }\n        if (sort.length) url.push(`sort=${sort.join(',')}`);\n\n        // Conditionally add offset and limit properties to query URL\n        if (limit && limit.from && limit.to) {\n            url.push(`offset=${limit.from}&limit=${limit.to}`);\n        } else if (limit && limit.to) {\n            url.push(`offset=0&limit=${limit.to}`);\n        } else if (limit && limit.from) {\n            url.push(`offset=${limit.from}`);\n        }\n\n        return `${this.path}?${url.join('&')}`;\n\n    }\n\n}\n\nRESTURL.ACTIVE = RESTURL;","import {StoreStrategy} from \"@phinxlab/libby-core-public\";\nimport {RESTDAO} from \"./RESTDAO\";\nimport {RESTURL} from \"./RESTURL\";\nimport {RESTConnection,RESTMethod} from \"./RESTConnection\";\nimport _ from \"lodash\";\n\nexport class RESTStoreStrategy extends StoreStrategy {\n\n    constructor(name,path,pk) {\n      super(name,pk);\n      this.urlMaker=new (RESTURL.ACTIVE)(path,pk);\n    }\n\n    createDAO() {\n      const me = this;\n      return class extends RESTDAO {\n        constructor() {\n          super(me.name,me.pk);\n        }\n      };\n    }\n\n    /**\n     *\n     * @param raw\n     * @returns {Promise<* | never>}\n     */\n    async find(raw,session) {\n        return RESTConnection.execute(this.urlMaker.createFind(raw),raw,RESTMethod.GET,session).then((http)=> {\n            if (http.status === 200) {\n                return http.data;\n            }\n            //We should add standarized messages\n            throw new Error(_.get(http,'rest.data','Failed to execute request'));\n        });\n    }\n\n    /**\n     *\n     * @param raw\n     * @returns {Promise<* | never>}\n     */\n    async save(raw,session) {\n        const url = raw[this.pk]?this.urlMaker.createUpdate(raw):this.urlMaker.createInsert(raw);\n        return RESTConnection.execute(url,raw,!raw[this.pk]?RESTMethod.POST:RESTMethod.PUT,session).then((http)=>{\n            if (http.status === 200) {\n                return http.data;\n            }\n            //We should add standarized messages\n            throw new Error(_.get(http,'rest.data','Failed to execute request'));\n        });\n    }\n\n    /**\n     *\n     * @param raw\n     * @returns {Promise<* | never>}\n     */\n    async remove(raw,session) {\n        return RESTConnection.execute(this.urlMaker.createDelete(raw),raw,RESTMethod.DELETE,session).then((http)=>{\n            if (http.status === 200) {\n                return http.data;\n            }\n            //We should add standarized messages\n            throw new Error(_.get(http,'rest.data','Failed to execute request'));\n        });\n    }\n\n}\n"],"names":["RESTSessionStrategyRAW","this","getTokenManager","retrieve","token","notify","SessionStrategy","NO_SESSION","status","url","loginPath","logoutPath","statusPath","RESTConnection","defineHeader","Libby","App","config","execute","RESTMethod","POST","then","http","session","data","user","isGuest","_this","NEW_SESSION","headers","catch","err","console","log","message","removeHeader","FAILED_TO_LOGIN","undefined","_","get","nick","password","customParams","dto","_this2","_this3","clean","RESTSessionStrategy","evaluateError","e","toString","indexOf","replace","PUT","Symbol","DELETE","GET","isolate","executeHTTP","Object","keys","includes","error","createHTTPError","method","header","body","JSON","stringify","value","getURL","fetch","createConfig","response","headersRaw","validateResponse","json","Error","_context6","code","text","Database","getSessionStrategy","name","sessionHasExpired","rest","RESTDAO","pk","strategy","command","find","parameter","save","saved","remove","removed","isSave","isRemove","processRemove","processResultset","processChange","DAO","JSConditions","DAOQueryBuilder","LOWEROREQUALS","LOWER","EQUALS","NOT_EQUALS","HIGHEROREQUALS","HIGHER","INCLUDES","STARTS","ENDS","RESTURL","path","filter","order","limit","aggregate","getOwnPropertySymbols","length","reference","i","where","type","RANGE","push","field","to","GROUP_START","GROUP_END","AND","OR","sort","o","direction","toURL","join","from","ACTIVE","RESTStoreStrategy","urlMaker","me","raw","createFind","createUpdate","createInsert","createDelete","StoreStrategy"],"mappings":"q6DAMaA,EAAb,yIAGW,8MAeaC,KAAKC,kBAAkBC,mBAArCC,WACMH,KAAKI,OAAOC,kBAAgBC,iBACnCC,OAAOJ,2HAmBTK,OAAKC,yDAAY,kBAAmBC,yDAAa,mBAAoBC,yDAAa,mEAErFC,EAAeC,aAAa,cAAeC,QAAMC,UAC5CC,OAAS,CACZR,IAAAA,EAAKC,UAAAA,EAAWC,WAAAA,EAAYC,WAAAA,QAEzBP,OAAOC,kBAAgBC,YACrBN,mDAMIG,8HACEA,GACbS,EAAeC,aAAa,gBAAiBV,qBACtCS,EAAeK,kBAAWjB,KAAKgB,OAAOL,YAAc,GAAIO,EAAWC,MAAMC,MAAK,SAACC,OAC9EC,EAAUD,EAAKE,KACbC,EAASF,EAATE,YACRA,EAAKC,QAAUH,EAAQG,QACvBC,EAAKtB,OAAOC,kBAAgBsB,YAAaH,EAAMH,EAAKO,QAAQ,kBACrDP,EAAKE,QACXM,OAAM,SAACC,GAERC,QAAQC,IAAIF,EAAIG,SAChBrB,EAAesB,aAAa,iBAC5BR,EAAKtB,OAAOC,kBAAgB8B,qBAAiBC,OAAWA,EAAWC,EAAEC,IAAIR,EAAK,YAAa,6KAOnFS,EAAMC,oGAAUC,iCAAe,4CAC7BF,EAAMC,GACZE,KAAQH,KAAAA,EAAMC,SAAAA,GAAaC,GACjC7B,EAAesB,aAAa,mCACrBtB,EAAeK,kBAAWjB,KAAKgB,OAAOP,WAAaiC,EAAKxB,EAAWC,MAAM,GAAMC,MAAK,SAACC,OACpFlB,EAAQkB,EAAKO,QAAQ,iBAC3BhB,EAAeC,aAAa,gBAAiBV,OACvCmB,EAAUD,EAAKE,KACbC,EAASF,EAATE,YACRA,EAAKC,QAAUH,EAAQG,QACvBkB,EAAKvC,OAAOC,kBAAgBsB,YAAaH,EAAMrB,GACxCkB,EAAKE,QACXM,OAAM,SAACC,GACRa,EAAKvC,OAAOC,kBAAgB8B,qBAAiBC,OAAWA,EAAWC,EAAEC,IAAIR,EAAK,YAAa,iKASxFtB,UACER,KAAKgB,OAAOR,IAAMA,gMAQlBI,EAAeK,kBAAWjB,KAAKgB,OAAON,YAAc,GAAIQ,EAAWC,MAAMC,MAAK,SAACC,GACpFT,EAAesB,aAAa,iBAC5BU,EAAK3C,kBAAkB4C,QACvBD,EAAKxC,OAAOC,kBAAgBC,eAC3BuB,OAAM,SAACC,GACRlB,EAAesB,aAAa,iBAC5BU,EAAKxC,OAAOC,kBAAgB8B,qBAAiBC,OAAWA,EAAWC,EAAEC,IAAIR,EAAK,YAAa,kKAjFtF,aA5BX,CAA4CzB,mBAkH/ByC,EAAsB,IAAI/C,ECpH1BmB,EAAa,GA2H1B,SAAS6B,EAAcC,UACNA,EAAEC,WACNC,QAAQ,iBAAmB,EACzB,0CAEJF,EAAEC,WAAWE,QAAQ,SAAU,IA/H1CjC,EAAWkC,IAAMC,OAAO,OACxBnC,EAAWC,KAAOkC,OAAO,QACzBnC,EAAWoC,OAASD,OAAO,UAC3BnC,EAAWqC,IAAMF,OAAO,SAsCnBnC,EAAWkC,MASXlC,EAAWC,OASXD,EAAWoC,SA+BXpC,EAAWqC,QAwCH3C,EAAiB,iEA5HjB,gBACW,wEAkCD,WAAOJ,EAAKkC,EAAKc,2FACzB9B,EAAK+B,YAAY,MAAOjD,EAAKkC,EAAKc,8IAQzB,WAAOhD,EAAKkC,EAAKc,2FAC1B9B,EAAK+B,YAAY,OAAQjD,EAAKkC,EAAKc,8IAQxB,WAAOhD,EAAKkC,EAAKc,2FAC5B9B,EAAK+B,YAAY,SAAUjD,EAAKkC,EAAKc,8IA8B7B,WAAOhD,EAAKkC,EAAKc,2FACzB9B,EAAK+B,YAAY,MAAOjD,EAAKkC,EAAKc,qIAS1B,SAAC5B,EAASrB,MAErBmD,OAAOC,KAAK/B,GAASgC,SADL,iBAC4B,KACtCC,EAAQd,EAAcnB,EAFZ,wBAGVF,EAAKoC,gBAAgBvD,EAAQsD,EAAOA,8DA9FrCE,EAAQvD,EAAKe,SACP,QAAXwC,EACO,CAAEvD,IAAAA,EAAKuD,OAAAA,EAAQnC,QAAS5B,KAAKgE,QAEjC,CAAExD,IAAAA,EAAKuD,OAAAA,EAAQE,KAAMC,KAAKC,UAAU5C,GAAOK,QAAS5B,KAAKgE,6CAGvDA,UACFhE,KAAKgE,OAAOA,wCAGVA,EAAQI,QACZJ,OAAOA,GAAUI,iDAUZ5D,EAAKkC,EAAKqB,2FAAQP,oDACrBxD,KAAK+D,GAAQjB,EAAoBuB,OAAO7D,GAAMkC,EAAKc,uJA8B5CO,EAAQvD,EAAKkC,EAAKc,2GAELc,MAAM9D,EAAKR,KAAKuE,aAAaR,EAAQvD,EAAKkC,kBAA3D8B,SACArE,EAAQqE,EAAS5C,QAAQU,IAAI,iBAC7BmC,EAAanC,EAAIkC,EAAU,cAAe,WAC1C5C,OAAe6C,mBAA6BtE,IAC5CI,EAASiE,EAASjE,YACnBmE,iBAAiB9C,EAASrB,sBAERiE,EAASG,sBAAtBpD,2BACC,CAAEA,KAAAA,EAAMK,QAAAA,EAASrB,OAAAA,+DAEjB,CAAEqB,QAAAA,EAASrB,OAAAA,iEAGtBwB,QAAQC,WACJM,OAAO,kDACA,IAAIsC,MAAMC,KAAE5B,WAAYF,oKA4B3B+B,EAAMC,EAAMxD,OAElBD,EAAU0D,WAASC,mBAAmBnC,EAAoBoC,MAC5DrB,EAAQ,IAAIe,8BAAuBE,mBAAaC,sBAAgBxD,GAAQwD,UACpED,QACC,IACDxD,EAAQ6D,2BAEhBtB,EAAMuB,KAAO,CAAEN,KAAAA,EAAMC,KAAAA,EAAMxD,KAAAA,GACpBsC,YCxHFwB,EAAb,uBAEgBH,EAAKI,mDACPJ,EAAKI,KACNC,SAAWP,WAAS1C,IAAI4C,GAAMK,gGAOhBC,2FACZxF,KAAKuF,SAASE,KAAKD,EAAQE,6JAOlBF,2FACTxF,KAAKuF,SAASI,KAAKH,EAAQE,WAC7BtE,MAAK,SAACwE,UACIA,uJAQCJ,2FACTxF,KAAKuF,SAASM,OAAOL,EAAQE,WAC/BtE,MAAK,SAAC0E,UACIA,iJAQLN,gHAEIA,GACTA,EAAQO,6BACLP,EAAQQ,oDACDhG,KAAKiG,cAAcT,oCAEvBxF,KAAKkG,iBAAiBV,oCAEtBxF,KAAKmG,cAAcX,sGAlDtC,CAA6BY,OCAvBC,EAAe,GACrBA,EAAaC,kBAAgBC,eAAe,gBAC5CF,EAAaC,kBAAgBE,OAAO,QACpCH,EAAaC,kBAAgBG,QAAQ,SACrCJ,EAAaC,kBAAgBI,YAAY,aACzCL,EAAaC,kBAAgBK,gBAAgB,iBAC7CN,EAAaC,kBAAgBM,QAAQ,SACrCP,EAAaC,kBAAgBO,UAAU,WACvCR,EAAaC,kBAAgBQ,QAAQ,SACrCT,EAAaC,kBAAgBS,MAAM,WAEtBC,EAAb,sBAEiBC,EAAK3B,kBACR2B,KAAOA,OACP3B,GAAKA,iDAGF5C,mBACC1C,KAAKiH,+CAGNvE,mBACC1C,KAAKiH,iBAAQvE,EAAI1C,KAAKsF,0CAGvB5C,mBACC1C,KAAKiH,iBAAQvE,EAAI1C,KAAKsF,wCAGzBE,OACA0B,EAAgC1B,EAAhC0B,OAAOC,EAAyB3B,EAAzB2B,MAAMC,EAAmB5B,EAAnB4B,MAAMC,EAAa7B,EAAb6B,UACpB1D,EAAOD,OAAO4D,sBAAsBJ,GACpC1G,EAAM,MAERmD,EAAK4D,OAAO,GACAvH,KAAKwH,kBAERC,EAAE,EAAEA,EAAE9D,EAAK4D,OAAOE,IAAK,KACtBC,EAAQR,EAAOvD,EAAK8D,IACtBC,EAAMC,OAASrB,kBAAgBsB,QAC/BpH,EAAIqH,eAAQH,EAAMI,kBAASzB,EAAaC,kBAAgBK,6BAAoBe,EAAMtD,QAClF5D,EAAIqH,eAAQH,EAAMI,kBAASzB,EAAaC,kBAAgBC,4BAAmBmB,EAAMK,MAEjFL,EAAMC,OAAOrB,kBAAgB0B,aAAeN,EAAMC,OAAOrB,kBAAgB2B,WAAaP,EAAMC,OAAOrB,kBAAgB4B,KAAOR,EAAMC,OAAOrB,kBAAgB6B,GACvJ3H,EAAIqH,eAAQH,EAAMI,kBAASJ,EAAMtD,YAEjC5D,EAAIqH,eAAQH,EAAMI,kBAASzB,EAAaqB,EAAMC,mBAAUD,EAAMtD,iBAKpEgE,EAAK,GACFX,EAAE,EAAEA,EAAEN,EAAMI,OAAOE,IAAK,KACvBY,EAAIlB,EAAMM,GAChBW,EAAKP,MAAsB,SAAhBQ,EAAEC,UAAqB,IAAI,IAAID,EAAEP,cAE5CT,GACA7G,EAAIqH,KAAKR,EAAUkB,QAAQC,KAAK,MAEhCJ,EAAKb,QAAQ/G,EAAIqH,oBAAaO,EAAKI,KAAK,OAGxCpB,GAASA,EAAMqB,MAAQrB,EAAMW,GAC7BvH,EAAIqH,sBAAeT,EAAMqB,uBAAcrB,EAAMW,KACtCX,GAASA,EAAMW,GACtBvH,EAAIqH,8BAAuBT,EAAMW,KAC1BX,GAASA,EAAMqB,MACtBjI,EAAIqH,sBAAeT,EAAMqB,iBAGnBzI,KAAKiH,iBAAQzG,EAAIgI,KAAK,YA5DxC,GAkEAxB,EAAQ0B,OAAS1B,MCzEJ2B,EAAb,uBAEgBzD,EAAK+B,EAAK3B,mDACdJ,EAAKI,KACNsD,SAAS,IAAK5B,EAAQ0B,OAAQzB,EAAK3B,wEAIlCuD,EAAK7I,4EAGD6I,EAAG3D,KAAK2D,EAAGvD,sBAFAD,gDAYZyD,EAAIxH,2FACJV,EAAeK,QAAQjB,KAAK4I,SAASG,WAAWD,GAAKA,EAAI5H,EAAWqC,IAAIjC,GAASF,MAAK,SAACC,MACtE,MAAhBA,EAAKd,cACEc,EAAKE,WAGV,IAAIqD,MAAMvC,EAAEC,IAAIjB,EAAK,YAAY,4KASpCyH,EAAIxH,+EACLd,EAAMsI,EAAI9I,KAAKsF,IAAItF,KAAK4I,SAASI,aAAaF,GAAK9I,KAAK4I,SAASK,aAAaH,qBAC7ElI,EAAeK,QAAQT,EAAIsI,EAAKA,EAAI9I,KAAKsF,IAAoBpE,EAAWkC,IAA3BlC,EAAWC,KAAoBG,GAASF,MAAK,SAACC,MAC1E,MAAhBA,EAAKd,cACEc,EAAKE,WAGV,IAAIqD,MAAMvC,EAAEC,IAAIjB,EAAK,YAAY,8KASlCyH,EAAIxH,2FACNV,EAAeK,QAAQjB,KAAK4I,SAASM,aAAaJ,GAAKA,EAAI5H,EAAWoC,OAAOhC,GAASF,MAAK,SAACC,MAC3E,MAAhBA,EAAKd,cACEc,EAAKE,WAGV,IAAIqD,MAAMvC,EAAEC,IAAIjB,EAAK,YAAY,sIA1DnD,CAAuC8H"}